#include <iostream>
#include <cassert>
#include <string>
using namespace std;


bool isValidUppercaseStateCode(string stateCode)
{
    const string codes =
        "AL.AK.AZ.AR.CA.CO.CT.DE.DC.FL.GA.HI.ID.IL.IN.IA.KS."
        "KY.LA.ME.MD.MA.MI.MN.MS.MO.MT.NE.NV.NJ.NH.NM.NY.NC."
        "ND.OH.OK.OR.PA.RI.SC.SD.TN.TX.UT.VT.VA.WA.WV.WI.WY";
    return (stateCode.size() == 2  &&
            stateCode.find('.') == string::npos  &&  // no '.' in stateCode
            codes.find(stateCode) != string::npos);  // match found
}

bool hasRightSyntax(string pollData) {
    if (pollData == "") {
        return true; }

    
    for (int i=0; i < pollData.length(); i++){
        //check if the 0 character is a letter
        if (isalpha(pollData[i])){
            i++;
            //check if 1 character is a digit
            if (isdigit(pollData[i])){
                i++;
                //check if 2rd character is a digit
                if (isdigit(pollData[i])){
                    i++;
                    pollData.at(i) = toupper(pollData.at(i));
                    pollData.at(i+1) = toupper(pollData.at(i+1));
                    if (isValidUppercaseStateCode(pollData.substr(i,2))){
                        i++;
                       //let it fall through
                    }
                    else {
                        return false;
                    }
                    
                }
                else {
                    pollData.at(i) = toupper(pollData.at(i));
                    pollData.at(i+1) = toupper(pollData.at(i+1));
                    
                    if (isValidUppercaseStateCode(pollData.substr(i,2))){
                        i++;
                       //let it fall through
                    }
                    else {
                        return false;
                    }
                }
            }// if not character return false
            else{
                return false;
            }
        }// if not letter return false
        else {
            return false;
        }
   }
    return true;
}

int computeVotes(string pollData, char party, int& voteCount){
   
    if (isalpha(party)){
        if (hasRightSyntax(pollData)){
            
            for (int i=0; i < pollData.length(); i++){
                
                
                if (pollData.at(i) == party){
                    i++;
                    if (isdigit(pollData[i+1])){
                        
                        if (pollData.at(i)*10 + pollData.at(i+1) > 0){
                            voteCount= voteCount + pollData.at(i+1);
                            voteCount= pollData.at(i)*10 + voteCount;

                            i= i+ 3;
                        }
                        else {
                            return 2;
                        }
                        
                    }
                    else {
                        if (pollData.at(i) > 0){
                            voteCount = voteCount + pollData.at(i);
                            i= i+2;
                        }
                        else {
                            return 2;
                        }
                    }
                       
                    
                    
                }
                
                else {
                    i++;
                    if (isdigit(pollData[i+1])){
                        if (pollData.at(i)*10 + pollData.at(i+1) > 0){
                            i= i+ 3;
                            //fall through
                        }
                        else {
                            return 2;
                        }
                        //check
                    }
                    else {
                        if (pollData.at(i) > 0){
                            
                            i = i+2;
                            
                        }
                        else {
                            return 2;
                        }
                    }
                }
            
                
                
              }
        }
        else {
            return 1;
        }
    }
    else {
        return 3;
    }
    return 0;
}


int main()
{
    assert(hasRightSyntax("R40TXD54CA"));
    assert(!hasRightSyntax("R40MXD54CA"));
    int votes;
    votes = -999;    // so we can detect whether computeVotes sets votes
    assert(computeVotes("R40TXD54CAr6Msd28nYL06UT", 'd', votes) == 0  &&  votes ==82);
    votes = -999;    // so we can detect whether computeVotes sets votes
    assert(computeVotes("R40TXD54CA", '%', votes) == 3  &&  votes == -999);
    cout << "All tests succeeded" << endl;
}
