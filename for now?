//
//  array.cpp
//
//  Created by Karen Primero on 11/2/24.
//

#include <iostream>
#include <string>
#include <cassert>
using namespace std;

int appendToAll(string a[], int n, string value){
    if ( n < 0 ){
        return -1;
    }
    for(int i = 0 ; i < n ; i++){
        a[i] = a[i] + value;
    }
    return n;
}

int lookup(const string a[], int n, string target){
    for(int i = 0 ; i < n ; i++){
        if (a[i] == target){
            return n;
        }
    }
    return -1;
}

int positionOfMax(const string a[], int n){
    if (n <= 0){
        return -1;
    }
    int position = 0;
    string firstMax = "";
    for(int i = 0; i < n ; i++){
        if(a[i]>firstMax){
            firstMax = a[i];
            position = i;
        }
    }
    return position;
}

int rotateLeft(string a[], int n, int pos){
     if (n < 0){
        return -1;
     }
    if(pos >= n){
        return -1;
    }
    
    string store = "";
    
    for(int i = 0 ; i < n ; i++){
        if(i == pos){
        store = a[i];
        a[i] = a[i+1];
        }
        if(i > pos){
        a[i] = a[i+1];
        }
    }
    a[n-1] = store;
    return pos;
}

int countRuns(const string a[], int n){
    if(n == 0){
    return 0;
    }
    if (n < 0){
    return -1;
    }
    
    string checkIfSimilar;
    int counter = 0;
    
    for(int i = 0 ; i < n ; i++){
        checkIfSimilar = a[i];
     if(checkIfSimilar == a[i]){
         if( a[i] != a[i + 1]){
         counter++;}
     }
    }
    return counter;
}

int flip(string a[], int n){
  if(n < 0){
        return -1;
    }
    string store;
    
    for(int i=0 ;i<n/2; i++){
        store = a[i];
      a[i] = a[n - 1 - i];
      a[n - 1 - i] = store;
    }
    return n;
}

int differ(const string a1[], int n1, const string a2[], int n2){
    if (n1 < 0){
        return -1;
    }
    if (n2 < 0){
        return -1;
    }
    int n3 = 0;
    if(n1 > n2){
        n3 = n2;
    }
    if(n1 < n2){
        n3 = n1;
    }
    for(int i = 0; i < n3; i++){
        if(a1[i] != a2[i]){
            return i;
        }
    }
    return n3;
}
