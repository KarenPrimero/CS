#include <iostream>
#include <cassert>
#include <string>
using namespace std;


bool isValidUppercaseStateCode(string stateCode)
{
    const string codes =
        "AL.AK.AZ.AR.CA.CO.CT.DE.DC.FL.GA.HI.ID.IL.IN.IA.KS."
        "KY.LA.ME.MD.MA.MI.MN.MS.MO.MT.NE.NV.NJ.NH.NM.NY.NC."
        "ND.OH.OK.OR.PA.RI.SC.SD.TN.TX.UT.VT.VA.WA.WV.WI.WY";
    return (stateCode.size() == 2  &&
            stateCode.find('.') == string::npos  &&  // no '.' in stateCode
            codes.find(stateCode) != string::npos);  // match found
}

bool hasRightSyntax(string pollData) {
    if (pollData == "") {
        return true; }

    
    for (int i=0; i < pollData.length(); i++){
        //check if the 0 character is a letter
        if (isalpha(pollData[i])){
            i++;
            //check if 1 character is a digit
            if (isdigit(pollData[i])){
                i++;
                //check if 2rd character is a digit
                if (isdigit(pollData[i])){
                    i++;
                    pollData.at(i) = toupper(pollData.at(i));
                    pollData.at(i+1) = toupper(pollData.at(i+1));
                    if (isValidUppercaseStateCode(pollData.substr(i,2))){
                        i++;
                       //let it fall through
                    }
                    else {
                        return false;
                    }
                    
                }
                else {
                    pollData.at(i) = toupper(pollData.at(i));
                    pollData.at(i+1) = toupper(pollData.at(i+1));
                    
                    if (isValidUppercaseStateCode(pollData.substr(i,2))){
                        i++;
                       //let it fall through
                    }
                    else {
                        return false;
                    }
                }
            }// if not character return false
            else{
                return false;
            }
        }// if not letter return false
        else {
            return false;
        }
   }
    return true;
}

int computeVotes(string pollData, char party, int& voteCount){
    
    int singles = 0;
    int tens = 0;
    int total= 0;
    
    // Validate the party character
       if (!isalpha(party)) {
           return 3; // Party is not a letter
    }
       // Check if the poll data string is valid
       if (!hasRightSyntax(pollData)) {
           return 1; // Invalid poll data string
       }
       //  voteCount starts at 0
       voteCount = 0;
      
    
    for (int i=0; i < pollData.length(); i++) {
        
        if (toupper(pollData[i]) == toupper(party)) {
            //makes sure the votes counted is only the votes of the party we want
            i++;
            
            if (isdigit(pollData[i+1])) {
                //calculate the vote count when it is made up of 2 digits
                singles += pollData[i+1] - '0';
                tens += pollData[i] - '0';
                total += tens * 10 + singles;
                
                    if (total > 0){
                        voteCount +=pollData[i+1] - '0';
                        i = i + 3;
                    }
                    else {
                    
                        return 2;
                    }
            }
            else {
                if (pollData.at(i)>0) {
                    voteCount += pollData[i] - '0';
                    i= i+2;
                }
                else {
                    return 2;
                }
            }
        }
        
        else{
            i++;
            if (isdigit(pollData[i+1])) {
                
                singles += pollData[i+1] - '0';
                tens += pollData[i] - '0';
                total += tens * 10 + singles;
            
                
                if (total > 0){
                    
                    voteCount = voteCount + 0;
                    i = i + 3;
                    // make it break through
                }
                else {
                    return 2;
                }
            }
            else {
                if (pollData.at(i)>0) {
                    voteCount = voteCount + 0;
                    i= i+2;
                }
                else {
                    return 2;
                }
            }
        }
    }
    
 
    return 0;
}


int main()
{
    assert(hasRightSyntax("R42TXD54CA"));
    assert(!hasRightSyntax("R42MXD54CA"));
    int votes;
    votes = -999;    // so we can detect whether computeVotes sets votes
    assert(computeVotes("d5txd5txd5tx", 'd', votes) == 0  &&  votes == 15);
    votes = -999;    // so we can detect whether computeVotes sets votes
    assert(computeVotes("R40TXD54CA", '%', votes) == 3  &&  votes == -999);
    cout << "All tests succeeded" << endl;
}
